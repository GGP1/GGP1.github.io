<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL on Gastón Palomeque</title><link>https://gastonpalomeque.com/tags/sql/</link><description>Recent content in SQL on Gastón Palomeque</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sun, 27 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://gastonpalomeque.com/tags/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Delving into Wazuh's server performance enhancements</title><link>https://gastonpalomeque.com/posts/wazuh_performance_enhancements/</link><pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate><guid>https://gastonpalomeque.com/posts/wazuh_performance_enhancements/</guid><description>&lt;p&gt;In this post, we will go through real-world performance optimizations introduced to the Wazuh server &lt;a href="https://github.com/wazuh/wazuh/releases/tag/v4.13.0"&gt;4.13.0 version&lt;/a&gt;, achieving significant reductions in time and resources consumption up to &lt;strong&gt;95%&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;We will explore different techniques such as connection pooling, caching, SQL query improvements, reducing time complexity, better configuration values and more.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive into each one of the issues and how we fixed them.&lt;/p&gt;
&lt;h3 id="identifying-bottlenecks"&gt;Identifying bottlenecks&lt;/h3&gt;
&lt;p&gt;Diagnosing performance issues begins with a thorough review of the system architecture.&lt;/p&gt;</description></item><item><title>Mastering SQL with Go - Part 2</title><link>https://gastonpalomeque.com/posts/mastering_sql_with_go_p2/</link><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid>https://gastonpalomeque.com/posts/mastering_sql_with_go_p2/</guid><description>&lt;p&gt;This is the part 2 of a series covering &lt;strong&gt;sql&lt;/strong&gt; and &lt;strong&gt;Go&lt;/strong&gt;, this time, we will cover how to work with SQL transactions context and isolation levels, results dynamic scanning, full text search and recursive queries as well as using multiple result sets to do many queries in a single roundtrip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To go to part one, click &lt;a href="../mastering_sql_with_go_p1"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="transactions"&gt;Transactions&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with transactions, why are they necessary?&lt;/p&gt;
&lt;p&gt;A transaction is a way for an application to group several reads and writes together into a logical unit.&lt;/p&gt;</description></item><item><title>Mastering SQL with Go - Part 1</title><link>https://gastonpalomeque.com/posts/mastering_sql_with_go_p1/</link><pubDate>Sun, 24 Nov 2024 00:00:00 +0000</pubDate><guid>https://gastonpalomeque.com/posts/mastering_sql_with_go_p1/</guid><description>&lt;p&gt;I found myself using SQL a lot in one of my projects and I have learnt many things while trying to solve the problems I encountered.&lt;/p&gt;
&lt;p&gt;This post is the part one of a series where I will try to show how to manage data in a relational database using SQL (Postgre syntax), Go and its standard library package &lt;a href="https://github.com/golang/go/tree/master/src/database/sql"&gt;&lt;code&gt;database/sql&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Explaining absolutely everything would require an entire book so I will skip the subjects that most articles already cover (connection establishment, foreign keys, parameterized arguments, etc).&lt;/p&gt;</description></item></channel></rss>